namespace Interface;

attribute "priority";

enum CommandID : byte {
  UNSPECIFIED = 0,
  WRITE = 1,
  READ,
  READ_ACK,
  FIND,
  FIND_ACK,
  DUMP,
  ACK,
  NACK,
}

enum ValueType : byte {
    Int32,
    Float,
    Double,
    Int64,
    String,
    String16,
    ByteArray,
    LAST
}

table WriteCommand {
  offset: ulong;
  data: [ubyte];
}

table ReadCommand {
  offset: ulong;
  size: ulong;
}

table ReadAck {
  offset: ulong;
  size: ulong;
}

table FindCommand {
  value_type: ValueType;
  data: [ubyte];
}

table FoundOccurrences {
  base_address: ulong;
  offset: ulong;
  region_size: ulong;
  data_size: ulong;
  type : int;
}

table FindAck {
  value: [ubyte];
  value_type: ValueType;
  occurrences: [FoundOccurrences];
}

// uint64_t baseAddress;
// uint64_t offset;
// uint64_t region_size;
// uint64_t data_size;
// int32_t type;

table Ack
{
  status: bool;
}

table EmptyCommand
{
  
}

union Command {
  WriteCommand,
  ReadCommand,
  ReadAck,
  FindCommand,
  FindAck,
  Ack
}

table CommandEnvelope {
  id: CommandID; 
  body: Command;
}

root_type CommandEnvelope;
